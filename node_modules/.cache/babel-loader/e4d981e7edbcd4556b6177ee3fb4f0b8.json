{"ast":null,"code":"import _slicedToArray from\"/home/shukrani/Documents/project10/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import Login from\"./components/Login/Login\";import Home from\"./components/Home/Home\";import MainHeader from\"./components/MainHeader/MainHeader\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoggedIn=_useState2[0],setIsLoggedIn=_useState2[1];useEffect(function(){var storedUserLoggedInformation=localStorage.getItem(\"isLoggedIn\");if(storedUserLoggedInformation===\"1\"){setIsLoggedIn(true);}},[]);var loginHandler=function loginHandler(email,password){// We should of course check email and password\n// But it's just a dummy/ demo anyways\nlocalStorage.setItem(\"isLoggedIn\",\"1\");setIsLoggedIn(true);};var logoutHandler=function logoutHandler(){localStorage.removeItem(\"isLoggedIn\");setIsLoggedIn(false);};return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(MainHeader,{isAuthenticated:isLoggedIn,onLogout:logoutHandler}),/*#__PURE__*/_jsxs(\"main\",{children:[!isLoggedIn&&/*#__PURE__*/_jsx(Login,{onLogin:loginHandler}),isLoggedIn&&/*#__PURE__*/_jsx(Home,{onLogout:logoutHandler})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"sources":["/home/shukrani/Documents/project10/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const storedUserLoggedInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <React.Fragment>\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"wHAAA,MAAOA,MAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,MAAOC,MAAP,KAAkB,0BAAlB,CACA,MAAOC,KAAP,KAAiB,wBAAjB,CACA,MAAOC,WAAP,KAAuB,oCAAvB,C,wFAEA,QAASC,IAAT,EAAe,CACb,cAAoCL,QAAQ,CAAC,KAAD,CAA5C,wCAAOM,UAAP,eAAmBC,aAAnB,eAEAN,SAAS,CAAC,UAAM,CACd,GAAMO,4BAA2B,CAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAApC,CAEA,GAAIF,2BAA2B,GAAK,GAApC,CAAyC,CACvCD,aAAa,CAAC,IAAD,CAAb,CACD,CACF,CANQ,CAMN,EANM,CAAT,CAQA,GAAMI,aAAY,CAAG,QAAfA,aAAe,CAACC,KAAD,CAAQC,QAAR,CAAqB,CACxC;AACA;AACAJ,YAAY,CAACK,OAAb,CAAqB,YAArB,CAAmC,GAAnC,EACAP,aAAa,CAAC,IAAD,CAAb,CACD,CALD,CAOA,GAAMQ,cAAa,CAAG,QAAhBA,cAAgB,EAAM,CAC1BN,YAAY,CAACO,UAAb,CAAwB,YAAxB,EACAT,aAAa,CAAC,KAAD,CAAb,CACD,CAHD,CAKA,mBACE,MAAC,KAAD,CAAO,QAAP,yBACE,KAAC,UAAD,EAAY,eAAe,CAAED,UAA7B,CAAyC,QAAQ,CAAES,aAAnD,EADF,cAEE,wBACG,CAACT,UAAD,eAAe,KAAC,KAAD,EAAO,OAAO,CAAEK,YAAhB,EADlB,CAEGL,UAAU,eAAI,KAAC,IAAD,EAAM,QAAQ,CAAES,aAAhB,EAFjB,GAFF,GADF,CASD,CAED,cAAeV,IAAf"},"metadata":{},"sourceType":"module"}